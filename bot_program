import os
import logging
import tempfile
import asyncio
import zipfile
import pypandoc
from telegram import (
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    InputFile,
    ReplyKeyboardMarkup,
    KeyboardButton
)
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    CallbackContext,
    CallbackQueryHandler,
    filters,
    ContextTypes
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
TOKEN = "8029314491:AAFiFXIBkWPUaf8Up1zFkDpsRTNc5v9UiCg"
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def main_menu_keyboard():
    return ReplyKeyboardMarkup([
        ["üìÑ –†–∞–±–æ—Ç–∞ —Å —Ñ–∞–π–ª–∞–º–∏ ", "‚ÑπÔ∏è –ü–æ–º–æ—â—å"],
        ["üîÑ –≠—Ö–æ-—Ä–µ–∂–∏–º", "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏"]
    ], resize_keyboard=True)

# –ú–µ–Ω—é –≤—ã–±–æ—Ä–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
def conversion_menu_keyboard():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("DOCX ‚û° LaTeX", callback_data="docx_to_tex")],
        [InlineKeyboardButton("LaTeX ‚û° DOCX", callback_data="tex_to_docx")]
    ])

async def start(update: Update, context: CallbackContext):
    user = update.effective_user
    await update.message.reply_text(
        f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! –Ø –±–æ—Ç –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ —Ñ–∞–π–ª–æ–≤ –º–µ–∂–¥—É LaTeX –∏ DOCX.",
        reply_markup=main_menu_keyboard()
    )

async def help_command(update: Update, context: CallbackContext):
    await update.message.reply_text(
        "üìå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏:\n"
        "‚Ä¢ üìÑ –†–∞–±–æ—Ç–∞ —Å —Ñ–∞–π–ª–∞–º–∏ - –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤\n"
        "‚Ä¢ ‚ÑπÔ∏è –ü–æ–º–æ—â—å - —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
        "‚Ä¢ üîÑ –≠—Ö–æ-—Ä–µ–∂–∏–º - –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ –≤–∞—à–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π\n"
        "‚Ä¢ ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ - –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –±–æ—Ç–∞"
    )

async def button_handler(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()
    
    if query.data == "docx_to_tex":
        context.user_data['conversion'] = 'docx_to_tex'
        await query.edit_message_text("üì§ –û—Ç–ø—Ä–∞–≤—å—Ç–µ DOCX —Ñ–∞–π–ª –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤ LaTeX")
    elif query.data == "tex_to_docx":
        context.user_data['conversion'] = 'tex_to_docx'
        await query.edit_message_text("üì§ –û—Ç–ø—Ä–∞–≤—å—Ç–µ LaTeX —Ñ–∞–π–ª (.tex) –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤ DOCX")

async def handle_text(update: Update, context: CallbackContext):
    text = update.message.text
    
    if text == "üìÑ –†–∞–±–æ—Ç–∞ —Å —Ñ–∞–π–ª–∞–º–∏":
        await update.message.reply_text(
            "üîß –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏:",
            reply_markup=conversion_menu_keyboard()
        )
    elif text == "‚ÑπÔ∏è –ü–æ–º–æ—â—å":
        await help_command(update, context)
    elif text == "üîÑ –≠—Ö–æ-—Ä–µ–∂–∏–º":
        context.user_data['echo'] = True
        await update.message.reply_text("–≠—Ö–æ-—Ä–µ–∂–∏–º –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω üîÑ")
    elif text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏":
        await update.message.reply_text("‚öôÔ∏è –¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:\n- –§–æ—Ä–º–∞—Ç –ª–æ–≥–æ–≤: TEXT\n- –ö–æ–¥–∏—Ä–æ–≤–∫–∞: UTF-8")
    else:
        if context.user_data.get('echo'):
            await update.message.reply_text(f"üîÅ –≠—Ö–æ: {text}")

async def handle_document(update: Update, context: ContextTypes.DEFAULT_TYPE):
    doc = update.message.document
    user = update.effective_user
    file_ext = os.path.splitext(doc.file_name)[1].lower() if doc.file_name else ''
    conversion_type = context.user_data.get('conversion')

    try:
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
        if conversion_type == 'docx_to_tex' or file_ext == '.docx':
            await process_docx_to_tex(update, doc)
        elif conversion_type == 'tex_to_docx' or file_ext == '.tex':
            await process_tex_to_docx(update, doc)
        elif doc.mime_type.startswith("text"):
            await process_text_file(update, doc)
        else:
            raise ValueError("‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞!")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞: {str(e)}")
        await update.message.reply_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}")
    finally:
        context.user_data.pop('conversion', None)

async def process_tex_to_docx(update: Update, doc):
    with tempfile.TemporaryDirectory() as tmp_dir:
        try:
            # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
            file = await doc.get_file()
            content = await file.download_as_bytearray()
            
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
            tex_path = os.path.join(tmp_dir, "input.tex")
            with open(tex_path, 'wb') as f:
                f.write(content)
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è
            docx_path = os.path.join(tmp_dir, "output.docx")
            await convert_file(tex_path, docx_path, 'docx',
                             ['--standalone', '--resource-path=.', '--citeproc'])
            
            # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            with open(docx_path, 'rb') as f:
                await update.message.reply_document(
                    document=InputFile(f, filename=f"converted_{doc.file_name.replace('.tex', '.docx')}"),
                    caption="‚úÖ LaTeX -> DOCX –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!"
                )

        except Exception as e:
            logger.error(f"TeX->DOCX –æ—à–∏–±–∫–∞: {str(e)}")
            raise

async def process_docx_to_tex(update: Update, doc):
    with tempfile.TemporaryDirectory() as tmp_dir:
        try:
            # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
            file = await doc.get_file()
            content = await file.download_as_bytearray()
            
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
            docx_path = os.path.join(tmp_dir, "input.docx")
            with open(docx_path, 'wb') as f:
                f.write(content)
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è
            tex_path = os.path.join(tmp_dir, "output.tex")
            await convert_file(docx_path, tex_path, 'latex')
            
            # –£–ª—É—á—à–µ–Ω–∏–µ TeX —Ñ–∞–π–ª–∞
            enhance_tex_file(tex_path)
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –∞—Ä—Ö–∏–≤–∞
            zip_path = os.path.join(tmp_dir, "converted.zip")
            with zipfile.ZipFile(zip_path, 'w') as zipf:
                zipf.write(tex_path, os.path.basename(tex_path))
            
            # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            with open(zip_path, 'rb') as f:
                await update.message.reply_document(
                    document=InputFile(f, filename=f"converted_{doc.file_name.replace('.docx', '.zip')}"),
                    caption="‚úÖ DOCX -> LaTeX –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\nüì¶ –ê—Ä—Ö–∏–≤ —Å–æ–¥–µ—Ä–∂–∏—Ç .tex —Ñ–∞–π–ª —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º —à–∞–±–ª–æ–Ω–æ–º."
                )

        except Exception as e:
            logger.error(f"DOCX->TeX –æ—à–∏–±–∫–∞: {str(e)}")
            raise

async def process_text_file(update: Update, doc):
    try:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤
        file = await doc.get_file()
        content = await file.download_as_bytearray()
        text = content.decode('utf-8').replace(".", "-")
        
        with tempfile.NamedTemporaryFile(suffix=".txt", delete=False) as tmp:
            tmp.write(text.encode('utf-8'))
            tmp_path = tmp.name
        
        with open(tmp_path, 'rb') as f:
            await update.message.reply_document(
                document=InputFile(f, filename=f"fixed_{doc.file_name}"),
                caption="‚úÖ –¢–µ–∫—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω: —Ç–æ—á–∫–∏ –∑–∞–º–µ–Ω–µ–Ω—ã –Ω–∞ —Ç–∏—Ä–µ!"
            )
    finally:
        if os.path.exists(tmp_path):
            os.remove(tmp_path)

def enhance_tex_file(file_path: str):
    preamble = r"""\documentclass[12pt, a4paper]{article}
\usepackage[a4paper, mag=1000, left=1.5cm, right=1.5cm, top=2cm, bottom=2cm, headsep=0.7cm, footskip=1cm]{geometry}
\usepackage[utf8]{inputenc}
\usepackage[english,russian]{babel}
\usepackage[colorlinks=true, citecolor=blue, urlcolor=blue, linkcolor = blue]{hyperref}
\usepackage{graphicx}
\usepackage{physics}
\usepackage{amsmath,amssymb}
\usepackage{float}
\usepackage[T2A]{fontenc}
\usepackage{pdfpages}
\usepackage{mathrsfs}
\usepackage{multirow}
\usepackage{multicol}
\usepackage{mathtools}
\usepackage{icomma}
\usepackage{soul}
\usepackage{wrapfig}
\usepackage{setspace}
\usepackage{longtable}
\usepackage{titlesec}
\usepackage{array,tabularx,tabulary,booktabs}
\usepackage{adjustbox}
\usepackage{cancel}
\usepackage{centernot}
\usepackage{subcaption}
\usepackage{listings}
\usepackage{hhline}"""

    with open(file_path, 'r+', encoding='utf-8') as f:
        content = f.read()
        f.seek(0)
        f.write(preamble + "\n\\begin{document}\n" + content + "\n\\end{document}")
        f.truncate()

async def convert_file(input_path: str, output_path: str, fmt: str, args=None):
    try:
        loop = asyncio.get_event_loop()
        await loop.run_in_executor(
            None,
            lambda: pypandoc.convert_file(
                input_path, fmt,
                outputfile=output_path,
                extra_args=args or []
            )
        )
    except RuntimeError as e:
        logger.error(f"Pandoc error: {str(e)}")
        raise

async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE):
    logger.error("–û—à–∏–±–∫–∞:", exc_info=context.error)
    if update:
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞"
        )

def main():
    application = Application.builder().token(TOKEN).build()

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    handlers = [
        CommandHandler('start', start),
        CommandHandler('help', help_command),
        CallbackQueryHandler(button_handler),
        MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text),
        MessageHandler(filters.Document.ALL, handle_document)
    ]
    
    application.add_handlers(handlers)
    application.add_error_handler(error_handler)

    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    application.run_polling()

if __name__ == '__main__':
    main()
