import re
import pandas as pd
import matplotlib.pyplot as plt
from collections import defaultdict
from datetime import datetime

# Словарь для перевода названий команд
COMMAND_TRANSLATIONS = {
    '/start': 'Старт бота',
    '/help': 'Помощь',
    '/stats': 'Статистика',
    'select_docx_to_tex': 'Выбор DOCX→LaTeX',
    'select_tex_to_docx': 'Выбор LaTeX→DOCX',
    'menu_work_with_files': 'Меню: Работа с файлами',
    'menu_help': 'Меню: Помощь',
    'menu_settings': 'Меню: Настройки',
    'enable_echo_mode': 'Активация эхо-режима',
    'upload_docx': 'Загрузка DOCX',
    'upload_tex': 'Загрузка LaTeX',
    'upload_text': 'Загрузка текста',
    'conversion_docx_to_tex_success': 'Успешная конвертация DOCX→LaTeX',
    'conversion_tex_to_docx_success': 'Успешная конвертация LaTeX→DOCX',
    'echo_message': 'Эхо-сообщение'
}

def translate_command(command):
    """Переводит техническое название команды в читаемое"""
    return COMMAND_TRANSLATIONS.get(command, command)

def parse_log_file(log_file_path):
    """Парсит файл логов и извлекает статистику команд"""
    command_stats = defaultdict(int)
    
    with open(log_file_path, 'r', encoding='utf-8') as f:
        for line in f:
            if 'ACTION:' not in line:
                continue
                
            try:
                action_match = re.search(r'ACTION:([^\s]+)', line)
                if action_match:
                    action = action_match.group(1)
                    command_stats[action] += 1
            except Exception as e:
                print(f"Ошибка парсинга строки: {line.strip()}. Ошибка: {str(e)}")
    
    return command_stats

def plot_command_stats(command_stats, top_n=10):
    """Строит красивый график топ-N популярных команд"""
    # Сортируем и переводим команды
    sorted_commands = sorted(command_stats.items(), key=lambda x: x[1], reverse=True)[:top_n]
    commands = [translate_command(cmd) for cmd, _ in sorted_commands]
    counts = [count for _, count in sorted_commands]
    
    # Настраиваем стиль
    plt.style.use('seaborn')
    plt.figure(figsize=(12, 6), dpi=100)
    
    # Создаем горизонтальную бар-диаграмму
    bars = plt.barh(commands, counts, color=['#4C72B0', '#55A868', '#C44E52', '#8172B2', '#CCB974'])
    
    # Добавляем оформление
    plt.title('Топ популярных действий в боте', fontsize=14, pad=20)
    plt.xlabel('Количество использований', fontsize=12)
    plt.ylabel('Действия', fontsize=12)
    plt.grid(axis='x', linestyle='--', alpha=0.7)
    
    # Добавляем значения на столбцы
    for bar in bars:
        width = bar.get_width()
        plt.text(width + 0.5, bar.get_y() + bar.get_height()/2,
                f'{int(width)}',
                va='center', ha='left', fontsize=10)
    
    # Улучшаем читаемость
    plt.tight_layout()
    plt.gca().invert_yaxis()  # Чтобы самый популярный был сверху
    
    # Сохраняем и показываем
    plt.savefig('command_stats_ru.png', dpi=300, bbox_inches='tight', facecolor='white')
    plt.show()

def generate_stats_report(command_stats, output_file='stats_report_ru.txt'):
    """Генерирует отчет с русскими названиями"""
    with open(output_file, 'w', encoding='utf-8') as f:
        f.write("=== СТАТИСТИКА ИСПОЛЬЗОВАНИЯ БОТА ===\n\n")
        f.write(f"Всего зарегистрированных действий: {sum(command_stats.values())}\n\n")
        
        f.write("Топ-10 популярных действий:\n")
        for cmd, count in sorted(command_stats.items(), key=lambda x: x[1], reverse=True)[:10]:
            f.write(f"- {translate_command(cmd)}: {count} использований\n")

def main():
    log_file = 'bot_commands.log'
    
    try:
        # Анализируем логи
        command_stats = parse_log_file(log_file)
        
        if not command_stats:
            print("В логах не найдено данных о командах")
            return
        
        # Генерируем отчет и графики
        generate_stats_report(command_stats)
        plot_command_stats(command_stats)
        
        print("Анализ завершен. Результаты сохранены в:")
        print("- command_stats_ru.png (график с русскими подписями)")
        print("- stats_report_ru.txt (отчет на русском)")
        
    except FileNotFoundError:
        print(f"Ошибка: файл логов {log_file} не найден")
    except Exception as e:
        print(f"Ошибка при анализе: {str(e)}")

if __name__ == '__main__':
    main()
